package com.example.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.androidquanjiakan.entity.BindWatchEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BIND_WATCH_ENTITY".
*/
public class BindWatchEntityDao extends AbstractDao<BindWatchEntity, Long> {

    public static final String TABLENAME = "BIND_WATCH_ENTITY";

    /**
     * Properties of entity BindWatchEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Deviceid = new Property(1, String.class, "deviceid", false, "DEVICEID");
        public final static Property W_TYPE = new Property(2, String.class, "W_TYPE", false, "W__TYPE");
        public final static Property User_id = new Property(3, String.class, "user_id", false, "USER_ID");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Icon = new Property(5, String.class, "icon", false, "ICON");
        public final static Property Createtime = new Property(6, String.class, "createtime", false, "CREATETIME");
    }


    public BindWatchEntityDao(DaoConfig config) {
        super(config);
    }
    
    public BindWatchEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BIND_WATCH_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DEVICEID\" TEXT," + // 1: deviceid
                "\"W__TYPE\" TEXT," + // 2: W_TYPE
                "\"USER_ID\" TEXT," + // 3: user_id
                "\"NAME\" TEXT," + // 4: name
                "\"ICON\" TEXT," + // 5: icon
                "\"CREATETIME\" TEXT);"); // 6: createtime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BIND_WATCH_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BindWatchEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceid = entity.getDeviceid();
        if (deviceid != null) {
            stmt.bindString(2, deviceid);
        }
 
        String W_TYPE = entity.getW_TYPE();
        if (W_TYPE != null) {
            stmt.bindString(3, W_TYPE);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(4, user_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(6, icon);
        }
 
        String createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindString(7, createtime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BindWatchEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceid = entity.getDeviceid();
        if (deviceid != null) {
            stmt.bindString(2, deviceid);
        }
 
        String W_TYPE = entity.getW_TYPE();
        if (W_TYPE != null) {
            stmt.bindString(3, W_TYPE);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(4, user_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(6, icon);
        }
 
        String createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindString(7, createtime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BindWatchEntity readEntity(Cursor cursor, int offset) {
        BindWatchEntity entity = new BindWatchEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // W_TYPE
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // user_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // icon
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // createtime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BindWatchEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setW_TYPE(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIcon(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreatetime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BindWatchEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BindWatchEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BindWatchEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

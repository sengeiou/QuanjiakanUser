package com.example.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.androidquanjiakan.entity.WatchMapDevice_DeviceInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WATCH_MAP_DEVICE__DEVICE_INFO".
*/
public class WatchMapDevice_DeviceInfoDao extends AbstractDao<WatchMapDevice_DeviceInfo, Long> {

    public static final String TABLENAME = "WATCH_MAP_DEVICE__DEVICE_INFO";

    /**
     * Properties of entity WatchMapDevice_DeviceInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IMEI = new Property(1, String.class, "IMEI", false, "IMEI");
        public final static Property Location = new Property(2, String.class, "Location", false, "LOCATION");
        public final static Property Name = new Property(3, String.class, "Name", false, "NAME");
        public final static Property Online = new Property(4, String.class, "Online", false, "ONLINE");
        public final static Property PhoneNum = new Property(5, String.class, "PhoneNum", false, "PHONE_NUM");
        public final static Property Picture = new Property(6, String.class, "Picture", false, "PICTURE");
        public final static Property Time = new Property(7, String.class, "Time", false, "TIME");
        public final static Property Type = new Property(8, String.class, "Type", false, "TYPE");
    }


    public WatchMapDevice_DeviceInfoDao(DaoConfig config) {
        super(config);
    }
    
    public WatchMapDevice_DeviceInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WATCH_MAP_DEVICE__DEVICE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IMEI\" TEXT," + // 1: IMEI
                "\"LOCATION\" TEXT," + // 2: Location
                "\"NAME\" TEXT," + // 3: Name
                "\"ONLINE\" TEXT," + // 4: Online
                "\"PHONE_NUM\" TEXT," + // 5: PhoneNum
                "\"PICTURE\" TEXT," + // 6: Picture
                "\"TIME\" TEXT," + // 7: Time
                "\"TYPE\" TEXT);"); // 8: Type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WATCH_MAP_DEVICE__DEVICE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WatchMapDevice_DeviceInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String IMEI = entity.getIMEI();
        if (IMEI != null) {
            stmt.bindString(2, IMEI);
        }
 
        String Location = entity.getLocation();
        if (Location != null) {
            stmt.bindString(3, Location);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(4, Name);
        }
 
        String Online = entity.getOnline();
        if (Online != null) {
            stmt.bindString(5, Online);
        }
 
        String PhoneNum = entity.getPhoneNum();
        if (PhoneNum != null) {
            stmt.bindString(6, PhoneNum);
        }
 
        String Picture = entity.getPicture();
        if (Picture != null) {
            stmt.bindString(7, Picture);
        }
 
        String Time = entity.getTime();
        if (Time != null) {
            stmt.bindString(8, Time);
        }
 
        String Type = entity.getType();
        if (Type != null) {
            stmt.bindString(9, Type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WatchMapDevice_DeviceInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String IMEI = entity.getIMEI();
        if (IMEI != null) {
            stmt.bindString(2, IMEI);
        }
 
        String Location = entity.getLocation();
        if (Location != null) {
            stmt.bindString(3, Location);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(4, Name);
        }
 
        String Online = entity.getOnline();
        if (Online != null) {
            stmt.bindString(5, Online);
        }
 
        String PhoneNum = entity.getPhoneNum();
        if (PhoneNum != null) {
            stmt.bindString(6, PhoneNum);
        }
 
        String Picture = entity.getPicture();
        if (Picture != null) {
            stmt.bindString(7, Picture);
        }
 
        String Time = entity.getTime();
        if (Time != null) {
            stmt.bindString(8, Time);
        }
 
        String Type = entity.getType();
        if (Type != null) {
            stmt.bindString(9, Type);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WatchMapDevice_DeviceInfo readEntity(Cursor cursor, int offset) {
        WatchMapDevice_DeviceInfo entity = new WatchMapDevice_DeviceInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // IMEI
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Location
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Online
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // PhoneNum
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Picture
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Time
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // Type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WatchMapDevice_DeviceInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIMEI(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLocation(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOnline(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhoneNum(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPicture(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WatchMapDevice_DeviceInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WatchMapDevice_DeviceInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WatchMapDevice_DeviceInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
